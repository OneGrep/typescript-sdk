openapi: 3.1.0
info:
  title: OneGrep API
  description: OneGrep's core API service
  version: 0.0.1
servers:
  - url: http://localhost:8000
    description: Local
  - url: http://localhost:8080
    description: Docker
  - url: https://test-sandbox.onegrep.dev
    description: test-sandbox
  - url: https://api.onegrep.dev
    description: Production
paths:
  /health:
    get:
      summary: Health
      description: Generic healthcheck endpoint to ensure the service is running.
      operationId: health_health_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /api/v1/policies/:
    get:
      tags:
        - policies
      summary: Get All Policies
      operationId: get_all_policies_api_v1_policies__get
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
            title: Skip
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            title: Limit
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Policy'
                title: Response Get All Policies Api V1 Policies  Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - policies
      summary: Create Policy
      operationId: create_policy_api_v1_policies__post
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: X-ONEGREP-PROFILE-ID
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: 'null'
            title: X-Onegrep-Profile-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPolicyRequest'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/policies/approvals:
    get:
      tags:
        - policies
      summary: Get Approval Requests
      description: >-
        Get all approval requests visible to the user with their associated
        policies and resource details.
      operationId: get_approval_requests_api_v1_policies_approvals_get
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
            title: Page
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            default: 100
            title: Page Size
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApprovalAndPolicy'
                title: Response Get Approval Requests Api V1 Policies Approvals Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/policies/{policy_id}:
    get:
      tags:
        - policies
      summary: Get Policy
      operationId: get_policy_api_v1_policies__policy_id__get
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: integer
            title: Policy Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - policies
      summary: Update Policy
      operationId: update_policy_api_v1_policies__policy_id__put
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: integer
            title: Policy Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: Update Data
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/policies/resources/{resource_name}/approval:
    get:
      tags:
        - policies
      summary: Check Resource For Approval
      description: >-
        Checks the policy that is associated with a resource if it requires
        approval, if yes, this will create an approval request. If the policy
        indicates that

        it does require approval, this will wait for the user to approve or
        reject the request before returning back the final

        response and HTTP CODE. 200 = approved or didn't require approval, 403 =
        rejected by the user.
      operationId: >-
        check_resource_for_approval_api_v1_policies_resources__resource_name__approval_get
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: resource_name
          in: path
          required: true
          schema:
            type: string
            title: Resource Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/policies/resources/check:
    get:
      tags:
        - policies
      summary: Check Resource Access Get
      operationId: check_resource_access_get_api_v1_policies_resources_check_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyCheckResult'
    post:
      tags:
        - policies
      summary: Check Resource Access
      description: Generic endpoint to check resource access.
      operationId: check_resource_access_api_v1_policies_resources_check_post
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: X-ONEGREP-PROFILE-ID
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: 'null'
            title: X-Onegrep-Profile-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyCheckResult'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/policies/{policy_id}/{audit_id}/status:
    post:
      tags:
        - policies
      summary: Check Policy Status
      operationId: check_policy_status_api_v1_policies__policy_id___audit_id__status_post
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: policy_id
          in: path
          required: true
          schema:
            type: integer
            title: Policy Id
        - name: audit_id
          in: path
          required: true
          schema:
            type: integer
            title: Audit Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/audit/:
    get:
      tags:
        - audit
      summary: Get Audit Logs
      description: |-
        Gets audit logs visible to the user with pagination and filtering.

        - Page numbers start at 1 (not 0)
        - Results are sorted by timestamp (newest first)
        - Optional filters can be applied for policy_id, action, and date range
      operationId: get_audit_logs_api_v1_audit__get
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: Page number (1-indexed)
            default: 1
            title: Page
          description: Page number (1-indexed)
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            maximum: 500
            minimum: 1
            description: Items per page
            default: 100
            title: Page Size
          description: Items per page
        - name: policy_id
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: 'null'
            description: Filter by policy ID
            title: Policy Id
          description: Filter by policy ID
        - name: action
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: 'null'
            description: Filter by action type
            title: Action
          description: Filter by action type
        - name: start_date
          in: query
          required: false
          schema:
            anyOf:
              - type: string
                format: date-time
              - type: 'null'
            description: Filter logs after this date (ISO format)
            title: Start Date
          description: Filter logs after this date (ISO format)
        - name: end_date
          in: query
          required: false
          schema:
            anyOf:
              - type: string
                format: date-time
              - type: 'null'
            description: Filter logs before this date (ISO format)
            title: End Date
          description: Filter logs before this date (ISO format)
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse_AuditLog_'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/clients/meta:
    get:
      tags:
        - clients
      summary: Get Meta Client
      description: Gets the remote client config for the meta server.
      operationId: get_meta_client_api_v1_clients_meta_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteClientConfig'
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
  /api/v1/clients/hosts:
    get:
      tags:
        - clients
      summary: Get Hosts Clients
      description: Gets all the remote client configs for the host servers.
      operationId: get_hosts_clients_api_v1_clients_hosts_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RemoteClientConfig'
                type: array
                title: Response Get Hosts Clients Api V1 Clients Hosts Get
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
  /api/v1/integrations/{integration_name}/tools:
    get:
      tags:
        - integrations
      summary: Get Integration Tools
      description: Returns details for a tool in an integration available to a user.
      operationId: get_integration_tools_api_v1_integrations__integration_name__tools_get
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: integration_name
          in: path
          required: true
          schema:
            type: string
            title: Integration Name
        - name: X-ONEGREP-PROFILE-ID
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: 'null'
            title: X-Onegrep-Profile-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolDetails'
                title: >-
                  Response Get Integration Tools Api V1 Integrations 
                  Integration Name  Tools Get
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/integrations/{integration_name}/tools/{tool_name}:
    get:
      tags:
        - integrations
      summary: Get Tool Details
      description: Returns the details for a tool in an integration.
      operationId: >-
        get_tool_details_api_v1_integrations__integration_name__tools__tool_name__get
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: integration_name
          in: path
          required: true
          schema:
            type: string
            title: Integration Name
        - name: tool_name
          in: path
          required: true
          schema:
            type: string
            title: Tool Name
        - name: X-ONEGREP-PROFILE-ID
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: 'null'
            title: X-Onegrep-Profile-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDetails'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/integrations/{integration_name}/tools/{tool_name}/custom/tags:
    post:
      tags:
        - integrations
      summary: Upsert Tool Custom Tags
      description: >-
        Upserts custom tags for a tool in an integration. Will not delete any
        existing tags but will update any

        overlapping tags that are already set.
      operationId: >-
        upsert_tool_custom_tags_api_v1_integrations__integration_name__tools__tool_name__custom_tags_post
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: X-ONEGREP-PROFILE-ID
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: 'null'
            title: X-Onegrep-Profile-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolCustomTagsParams'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDetails'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - integrations
      summary: Delete Tool Custom Tags
      description: Deletes custom tags for a tool in an integration.
      operationId: >-
        delete_tool_custom_tags_api_v1_integrations__integration_name__tools__tool_name__custom_tags_delete
      security:
        - APIKeyHeader: []
        - HTTPBearer: []
      parameters:
        - name: X-ONEGREP-PROFILE-ID
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: 'null'
            title: X-Onegrep-Profile-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToolCustomTagSelectionParams'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolDetails'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    AccessPolicyType:
      type: string
      enum:
        - ALWAYS
        - NEVER
        - REQUIRES_PERMISSION
      title: AccessPolicyType
      description: Enum for access policy types
    AccountInformation:
      properties:
        user_id:
          type: string
          title: User Id
        account:
          $ref: '#/components/schemas/UserAccount'
        organization:
          $ref: '#/components/schemas/Organization'
      type: object
      required:
        - user_id
        - account
        - organization
      title: AccountInformation
      description: Model for storing account information
    ActionApprovalRequest:
      properties:
        id:
          anyOf:
            - type: integer
            - type: 'null'
          title: Id
        policy_id:
          type: integer
          title: Policy Id
        state:
          $ref: '#/components/schemas/ActionApprovalState'
          default: pending
        created_at:
          type: string
          format: date-time
          title: Created At
        last_updated_at:
          type: string
          format: date-time
          title: Last Updated At
        updated_by_user_id:
          type: string
          title: Updated By User Id
        payload:
          anyOf:
            - type: object
            - type: 'null'
          title: Payload
      type: object
      required:
        - id
        - policy_id
        - updated_by_user_id
      title: ActionApprovalRequest
      description: >-
        Model that holds the state of a request for an action to be taken with
        respect to a policy.

        Ex. if the policy is set to require approval, then we will have a
        request for approval.
    ActionApprovalState:
      type: string
      enum:
        - pending
        - approved
        - rejected
      title: ActionApprovalState
      description: Enum for policy approval states
    ApprovalAndPolicy:
      properties:
        approval:
          $ref: '#/components/schemas/ActionApprovalRequest'
        policy:
          $ref: '#/components/schemas/Policy'
        canonical_resource_name:
          type: string
          title: Canonical Resource Name
        integration_name:
          type: string
          title: Integration Name
        tool_name:
          type: string
          title: Tool Name
      type: object
      required:
        - approval
        - policy
        - canonical_resource_name
        - integration_name
        - tool_name
      title: ApprovalAndPolicy
      description: Approval and policy
    AuditLog:
      properties:
        id:
          anyOf:
            - type: integer
            - type: 'null'
          title: Id
        policy_id:
          type: integer
          title: Policy Id
        action:
          type: string
          title: Action
        details:
          type: object
          title: Details
        performed_by:
          type: string
          title: Performed By
          default: system
        timestamp:
          type: string
          format: date-time
          title: Timestamp
      type: object
      required:
        - policy_id
        - action
      title: AuditLog
      description: Model for audit logging
    AuthenticationMethod:
      type: string
      enum:
        - propelauth
        - api_key
      title: AuthenticationMethod
    AuthenticationStatus:
      properties:
        credentials_provided:
          type: boolean
          title: Credentials Provided
        method:
          anyOf:
            - $ref: '#/components/schemas/AuthenticationMethod'
            - type: 'null'
        user_id:
          anyOf:
            - type: string
            - type: 'null'
          title: User Id
        is_authenticated:
          type: boolean
          title: Is Authenticated
      type: object
      required:
        - credentials_provided
        - is_authenticated
      title: AuthenticationStatus
    BasePolicy:
      properties:
        event_name:
          type: string
          title: Event Name
        description:
          anyOf:
            - type: string
            - type: 'null'
          title: Description
        access_policy:
          $ref: '#/components/schemas/AccessPolicyType'
      type: object
      required:
        - event_name
        - access_policy
      title: BasePolicy
      description: Base model with shared policy fields
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    IngressConfig:
      properties:
        entryPoints:
          items:
            type: string
          type: array
          title: Entrypoints
        proxyDomain:
          type: string
          title: Proxydomain
        orgID:
          type: string
          title: Orgid
        orgRouteStrategy:
          type: string
          enum:
            - PathPrefix
            - Header
          title: Orgroutestrategy
          default: PathPrefix
        serverID:
          type: string
          title: Serverid
        serverRouteStrategy:
          type: string
          enum:
            - PathPrefix
            - Header
          title: Serverroutestrategy
          default: Header
        serverIsDefault:
          anyOf:
            - type: boolean
            - type: 'null'
          title: Serverisdefault
          default: false
        gatewayScheme:
          type: string
          title: Gatewayscheme
          default: http
      type: object
      required:
        - proxyDomain
        - orgID
        - serverID
      title: IngressConfig
    KindMetadata:
      type: object
    LauncherConfig:
      properties:
        configMapName:
          type: string
          title: Configmapname
        mountPath:
          type: string
          title: Mountpath
      type: object
      required:
        - configMapName
        - mountPath
      title: LauncherConfig
    MCPServerConfig:
      properties:
        name:
          type: string
          title: Name
        image:
          type: string
          title: Image
          default: registry.onegrep.dev/onegrep/mcp-host:latest
        git_repo_url:
          anyOf:
            - type: string
            - type: 'null'
          title: Git Repo Url
        git_branch:
          anyOf:
            - type: string
            - type: 'null'
          title: Git Branch
          default: main
        command:
          type: string
          title: Command
        args:
          items:
            type: string
          type: array
          title: Args
        env_vars:
          additionalProperties:
            type: string
          type: object
          title: Env Vars
      type: object
      required:
        - name
        - command
        - args
        - env_vars
      title: MCPServerConfig
    NewPolicyRequest:
      properties:
        integration_name:
          type: string
          title: Integration Name
        event_name:
          type: string
          title: Event Name
        access_policy:
          $ref: '#/components/schemas/AccessPolicyType'
      type: object
      required:
        - integration_name
        - event_name
        - access_policy
      title: NewPolicyRequest
      description: >-
        Model to create a new policy. Other policy fields are derived from the
        default policy for the

        integration/event
    Organization:
      properties:
        created_at:
          anyOf:
            - type: string
              format: date-time
            - type: 'null'
          title: Created At
        updated_at:
          anyOf:
            - type: string
              format: date-time
            - type: 'null'
          title: Updated At
        id:
          type: string
          title: Id
        owner_id:
          anyOf:
            - type: string
            - type: 'null'
          title: Owner Id
        created_by_user_id:
          anyOf:
            - type: string
            - type: 'null'
          title: Created By User Id
      type: object
      required:
        - id
      title: Organization
    PaginatedResponse_AuditLog_:
      properties:
        items:
          items:
            $ref: '#/components/schemas/AuditLog'
          type: array
          title: Items
        pagination:
          $ref: '#/components/schemas/PaginationMetadata'
      type: object
      required:
        - items
        - pagination
      title: PaginatedResponse[AuditLog]
    PaginationMetadata:
      properties:
        page:
          type: integer
          title: Page
        page_size:
          type: integer
          title: Page Size
        total:
          type: integer
          title: Total
        pages:
          type: integer
          title: Pages
        has_next:
          type: boolean
          title: Has Next
        has_prev:
          type: boolean
          title: Has Prev
      type: object
      required:
        - page
        - page_size
        - total
        - pages
        - has_next
        - has_prev
      title: PaginationMetadata
      description: Metadata for paginated results
    Policy:
      properties:
        event_name:
          type: string
          title: Event Name
        description:
          anyOf:
            - type: string
            - type: 'null'
          title: Description
        access_policy:
          $ref: '#/components/schemas/AccessPolicyType'
        id:
          anyOf:
            - type: integer
            - type: 'null'
          title: Id
        canonical_resource_name:
          type: string
          title: Canonical Resource Name
        organization_id:
          type: string
          title: Organization Id
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          anyOf:
            - type: string
              format: date-time
            - type: 'null'
          title: Updated At
      type: object
      required:
        - event_name
        - access_policy
        - canonical_resource_name
        - organization_id
      title: Policy
      description: Policy model that works with both SQL and in-memory storage
    PolicyCheckResult:
      properties:
        approved:
          type: boolean
          title: Approved
      type: object
      required:
        - approved
      title: PolicyCheckResult
      description: Result of a policy check
    RemoteClientConfig:
      properties:
        org_id:
          type: string
          title: Org Id
          example: org-123
        name:
          type: string
          title: Name
          example: my-server
        display_name:
          type: string
          title: Display Name
          example: My Server
        description:
          anyOf:
            - type: string
            - type: 'null'
          title: Description
          example: My Server Description
        ready:
          type: boolean
          title: Ready
          default: false
          example: true
        endpoint:
          type: string
          title: Endpoint
          example: https://gateway.onegrep.dev
        required_headers:
          anyOf:
            - additionalProperties:
                type: string
              type: object
            - type: 'null'
          title: Required Headers
          example:
            X-MCP-MC: my-server
      type: object
      required:
        - org_id
        - name
        - display_name
      title: RemoteClientConfig
    Server:
      properties:
        kind:
          type: string
          const: Server
          title: Kind
          default: Server
        metadata:
          $ref: '#/components/schemas/KindMetadata'
        spec:
          $ref: '#/components/schemas/ServerSpec'
        status:
          anyOf:
            - type: object
            - type: 'null'
          title: Status
        apiVersion:
          type: string
          title: Apiversion
          readOnly: true
      additionalProperties: true
      type: object
      required:
        - metadata
        - spec
        - apiVersion
      title: Server
    ServerSpec:
      properties:
        orgID:
          type: string
          title: Orgid
        image:
          type: string
          title: Image
        pullPolicy:
          type: string
          title: Pullpolicy
          default: IfNotPresent
        port:
          type: integer
          title: Port
          default: 8000
        displayName:
          anyOf:
            - type: string
            - type: 'null'
          title: Displayname
        envFromSources:
          anyOf:
            - items:
                type: object
              type: array
            - type: 'null'
          title: Envfromsources
        volumes:
          anyOf:
            - items:
                type: object
              type: array
            - type: 'null'
          title: Volumes
        volumeMounts:
          anyOf:
            - items:
                type: object
              type: array
            - type: 'null'
          title: Volumemounts
        launcherConfig:
          anyOf:
            - $ref: '#/components/schemas/LauncherConfig'
            - type: 'null'
        ingressConfig:
          anyOf:
            - $ref: '#/components/schemas/IngressConfig'
            - type: 'null'
      type: object
      required:
        - orgID
        - image
      title: ServerSpec
    ToolCustomProperties:
      properties:
        tool_name:
          type: string
          title: Tool Name
        tags:
          type: object
          title: Tags
      type: object
      required:
        - tool_name
      title: ToolCustomProperties
      description: >-
        Custom properties for a tool in an integration that are set by the user
        or agent.


        #? Why are we excluding certain fields? Because these fields are
        redundant at serialization time because this object is always a
        sub-object

        #? of ToolDetails or some other wrapper class.


        #? How does this decision affect OpenAPI schema generation? - It
        excludes the fields from the generated schema.

        #? How does it affect SQLModel? - It does not affect SQLModel.


        #? An alternate path to exclusion at the model level is using
        response_model_exclude={propA, propB, propC} approach but this is not
        preferred

        #? because it opens up the possibility of different response models that
        share the same object type to have different fields getting excluded

        #? and that is inherently confusing and brittle.
    ToolCustomTagSelectionParams:
      properties:
        integration_name:
          type: string
          title: Integration Name
        tool_name:
          type: string
          title: Tool Name
        tags:
          items:
            type: string
          type: array
          title: Tags
      type: object
      required:
        - integration_name
        - tool_name
        - tags
      title: ToolCustomTagSelectionParams
      description: >-
        Params that generalize the selection the tags for a tool in an
        integration.
    ToolCustomTagsParams:
      properties:
        integration_name:
          type: string
          title: Integration Name
        tool_name:
          type: string
          title: Tool Name
        tags:
          type: object
          title: Tags
      type: object
      required:
        - integration_name
        - tool_name
        - tags
      title: ToolCustomTagsParams
      description: >-
        Params to change the tags for a tool in an integration. Will upsert any
        tags that already

        exist. Will not delete any other tags. This is only net additive.
    ToolDetails:
      properties:
        integration_name:
          type: string
          title: Integration Name
        tool_name:
          type: string
          title: Tool Name
        policy:
          $ref: '#/components/schemas/BasePolicy'
        custom_properties:
          anyOf:
            - $ref: '#/components/schemas/ToolCustomProperties'
            - type: 'null'
      type: object
      required:
        - integration_name
        - tool_name
        - policy
      title: ToolDetails
      description: >-
        Details about a tool in an integration. This doesn't need to be stored
        in the database because this

        object is meant to be used as a response object and is derived at
        runtime based on other states.
    TraefikIngressRoute:
      properties:
        kind:
          type: string
          const: IngressRoute
          title: Kind
          default: IngressRoute
        metadata:
          $ref: '#/components/schemas/KindMetadata'
        spec:
          $ref: '#/components/schemas/IngressConfig'
        status:
          type: object
          title: Status
        apiVersion:
          type: string
          title: Apiversion
          readOnly: true
      additionalProperties: true
      type: object
      required:
        - metadata
        - spec
        - status
        - apiVersion
      title: TraefikIngressRoute
    UserAccount:
      properties:
        created_at:
          anyOf:
            - type: string
              format: date-time
            - type: 'null'
          title: Created At
        updated_at:
          anyOf:
            - type: string
              format: date-time
            - type: 'null'
          title: Updated At
        id:
          type: string
          title: Id
        belongs_to_organization_id:
          anyOf:
            - type: string
            - type: 'null'
          title: Belongs To Organization Id
        api_key:
          type: string
          title: Api Key
      type: object
      required:
        - id
        - api_key
      title: UserAccount
      description: Model for storing user information including their API key
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      in: header
      name: X-ONEGREP-API-KEY
    HTTPBearer:
      type: http
      scheme: bearer
